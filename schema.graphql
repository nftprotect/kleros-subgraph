# KlerosLiquid entities
enum Period {
  "Evidence can be submitted. This is also when drawing has to take place."
  evidence,
  "Jurors commit a hashed vote. This is skipped for courts without hidden votes."
  commit,
  "Jurors reveal/cast their vote depending on whether the court has hidden votes or not."
  vote, 
  "The dispute can be appealed."
  appeal,
  "Tokens are redistributed and the ruling is executed."
  execution
}

type Court @entity {
  id: ID!
  "Court Identificator (int), for ordering"
  subcourtID: BigInt!
  "Total of disputes handled by this court"
  disputesNum: BigInt!
  "Number of disputes closed that were appealed at least once"
  disputesAppealed: BigInt!
  "Number of disputes already closed"
  disputesClosed: BigInt!
  "Number of disputes without rulling"
  disputesOngoing: BigInt!
  "Number of Disputes in evidence period"
  evidencePhaseDisputes: BigInt!,
  "Number of Disputes in commit period"
  commitPhaseDisputes: BigInt!,
  "Number of Disputes in voting period"
  votingPhaseDisputes: BigInt!,
  "Number of Disputes in appeal period"
  appealPhaseDisputes: BigInt!,
  "List of disputes on this court"
  disputes: [Dispute!]! @derivedFrom(field:"subcourtID")
  "List of jurors of this court"
  jurors: [Juror!]! @derivedFrom(field:"subcourtsIDs")
  "Court childrens"
  childs: [Court!]!
  "Parent Court"
  parent: Court
  "Current policy for this Court"
  policy: PolicyUpdate
  "Number of active jurors in this court"
  activeJurors: BigInt!
  "Total amount of pnk staked in this court"
  tokenStaked: BigInt!
  "hiddenVotes property"
  hiddenVotes: Boolean!
  "minimum amount of tokens that can be staked"
  minStake: BigInt!
  "Alpha"
  alpha: BigInt!
  "Fee paid for coherent juror"
  feeForJuror: BigInt!
  "Number of jurors to jump to parent court"
  jurorsForCourtJump: BigInt!
  "Time perids of this court"
  timePeriods: [BigInt!]!,
  "Total ETH distributed in fees"
  totalETHFees: BigInt!,
  "tokens transfered from incoherent jurors to coherent juros"
  totalTokenRedistributed: BigInt!,
  "Coherency of the court votes. Coherent Votes / Total Votes * 100. 0 if no votes"
  coherency: BigInt!,
  "Percentage of disputes that were appealed [0-100]."
  appealPercentage: BigInt!
  "Number of votes in closed disputes"
  numberOfVotes: BigInt!,
  "Number of coherent votes in closed disputes"
  numberOfCoherentVotes: BigInt!
}

type KlerosCounter @entity {
  "id = ID"
  id: ID!
  "Amount of Courts available"
  courtsCount: BigInt!,
  "Total Disputes raised"
  disputesCount: BigInt!,
  "Total open disputes"
  openDisputes: BigInt!,
  "Total closed disputes"
  closedDisputes: BigInt!,
  "Number of Disputes in evidence period"
  evidencePhaseDisputes: BigInt!,
  "Number of Disputes in commit period"
  commitPhaseDisputes: BigInt!,
  "Number of Disputes in voting period"
  votingPhaseDisputes: BigInt!,
  "Number of Disputes in appeal period"
  appealPhaseDisputes: BigInt!,
  "Number of disputes closed that were appealed"
  disputesAppealed: BigInt!,
  "Percentage of Closed disputes that were appealed"
  appealPercentage: BigInt!,
  "Number of active jurors"
  activeJurors: BigInt!,
  "Number of inactive jurors"
  inactiveJurors: BigInt!,
  "list of jurors drawn at least once"
  drawnJurors: BigInt!,
  "Number of different arbitrables that have interacted with the Courts"
  numberOfArbitrables: BigInt!
  "Total tokens staked in this courts"
  tokenStaked: BigInt!,
  "Total ETH distributed in fees"
  totalETHFees: BigInt!,
  "Total Token (PNK) redistributed within jurors (from incoherent to coherent)"
  totalTokenRedistributed: BigInt!,
  "Total USD passed throug the contract in deposit and jurors fees"
  totalUSDthroughContract: BigInt!
}

type StakeSet @entity {
  id: ID!
  address: Juror! # address
  subcourtID: BigInt! # uint256
  stake: BigInt! # uint128
  newTotalStake: BigInt! # uint256
  blocknumber: BigInt!
  timestamp: BigInt!
  gasCost: BigInt!
}

type Juror @entity {
  "address, juror (person) maybe has multiple addresses."
  id: ID!,
  "Courts where the juror has stake"
  subcourtsIDs: [Court!]!,
  "Current Stakes for this juror"
  currentStakes: [CourtStake!]! @derivedFrom(field:"juror"),
  "all the setStakes event emited by this juror"
  allStakes: [StakeSet!]! @derivedFrom(field:"address")
  "Total staked across all the courts"
  totalStaked: BigInt!,
  "List of disputes where has at least one vote"
  disputesAsJuror: [Dispute!]! @derivedFrom(field:"jurorsInvolved"),
  "Number of disputes that has been participating as juror"
  numberOfDisputesAsJuror: BigInt!,
  "List of disputes raised by this wallet"
  disputesAsCreator: [Dispute!]! @derivedFrom(field:"creator")
  "Number of disputes created by this wallet"
  numberOfDisputesCreated: BigInt!,
  "All the votes of this juror"
  votes: [Vote!]! @derivedFrom(field:"address")
  "Amount of ETH rewarded as juror (+ it's gain, - it's loss)"
  ethRewards: BigInt!
  "Amount of Token (PNK) rewarded as juror (+ it's gain, - it's loss)"
  tokenRewards: BigInt!
  "Coherency of the juror votes. Coherent Votes / Total Votes * 100. 0 if no votes"
  coherency: BigInt!,
  "Number of coherent votes"
  numberOfCoherentVotes: BigInt!
  "Number of votes this juror has in closed disputes"
  numberOfVotes: BigInt!
  "Transfers of the rewards for this wallet"
  tokenAndETHShifts: [TokenAndETHShift!]! @derivedFrom(field:"address")
  "Total gas cost"
  totalGasCost: BigInt!
}

type CourtStake @entity {
  "address.toHex()-subcourtID.toString()"
  id: ID!
  "Court entity"
  court: Court!
  "Juror entity"
  juror: Juror!
  "Amount staked in this court for this juror"
  stake: BigInt!
  "Timestamp of the last stake"
  timestamp: BigInt!
  "blocknumber of the last stake"
  blockNumber: BigInt!
  "tx hash"
  txid: Bytes!
}

type Arbitrable @entity {
  "smart contract address"
  id: ID!,
  "List of disputes generated by the arbitrable"
  disputes: [Dispute!]! @derivedFrom(field:"arbitrable"),
  "Total Disputes raised"
  disputesCount: BigInt!,
  "Total open disputes"
  openDisputes: BigInt!,
  "Total closed disputes"
  closedDisputes: BigInt!,
  "Number of Disputes in evidence period"
  evidencePhaseDisputes: BigInt!,
  "Number of Disputes in commit period"
  commitPhaseDisputes: BigInt!,
  "Number of Disputes in voting period"
  votingPhaseDisputes: BigInt!,
  "Number of Disputes in appeal period"
  appealPhaseDisputes: BigInt!,
  "Amount of eth fees paid through the arbitrable"
  ethFees: BigInt!,
}

type Dispute @entity {
  id: ID!,
  "Dispute Number"
  disputeID: BigInt!,
  "Arbitrable SC who raised the dispute"
  arbitrable: Arbitrable!,
  "wallet who raise the dispute"
  creator: Juror!,
  "Court where the dispute is handled"
  subcourtID: Court!,
  "Number of choices wihtin the dispute"
  numberOfChoices: BigInt!,
  "Current Period of the dispute"
  period: Period!
  "Timestamp when the dispute was raised"
  startTime: BigInt!
  "Timestamp of the last period change"
  lastPeriodChange: BigInt!,
  "Rounds in the dispute"
  rounds: [Round!]! @derivedFrom(field:"dispute"),
  "Number of rounds in the dispute"
  numberOfRounds: BigInt!,
  "Number of votes in the dispute"
  numberOfVotes: BigInt!
  "Number of coherent votes in the dispute"
  numberOfCoherentVotes: BigInt!
  "Coherency of the dispute votes. Coherent Votes / Total Votes * 100. 0 if no votes"
  coherency: BigInt!,
  "Boolean indicating if this dispute was appealed at least once"
  appealed: Boolean!
  "Is ruled the case?"
  ruled: Boolean!,
  "Current rulling"
  currentRulling: BigInt!,
  "List of jurors (wallets) involved in the dispute"
  jurorsInvolved: [Juror!]!,
  "Metaevidence of the dispute. Question and options"
  metaevidence: String
  "Transaction hash where this dispute was created"
  txid: Bytes!
  "Transfers made due to this dispute"
  TokenAndETHShifts: [TokenAndETHShift!]! @derivedFrom(field:"disputeId")
}

type Round @entity {
  "identifier, hash tx"
  id: ID!,
  "Dispute asociated to the round"
  dispute: Dispute!,
  "List of votes in the round"
  votes: [Vote!]! @derivedFrom(field: "round")
  "Amount of votes in the Round"
  numberOfVotes: BigInt!,
  "Amount of coherent votes in the Round"
  numberOfCoherentVotes: BigInt!,
  "Coherency of the round votes. Coherent Votes / Total Votes * 100. 0 if no votes"
  coherency: BigInt!
  "which choice wins in the round?"
  winningChoice: BigInt!,
  "Timestamp of the beggining of the round"
  startTime: BigInt!
}

type Vote @entity {
  "id of the vote: disputeId-voteid"
  id: ID!,
  "Dispute associated for this vote"
  dispute: Dispute!,
  "Round within the dispute where the vote is casted"
  round: Round!,
  "Vote identificator"
  voteID: BigInt!,
  "Address who was selected to vote"
  address: Juror!,
  "Choice selected, null if has not voted or revelead the vote"
  choice: BigInt,
  "Boolean to indicate if the vote was casted. If not, the choice 0 indicates pending"
  voted: Boolean!,
  "Salt of the vote"
  salt: BigInt,
  "timestamp of the vote casted"
  timestamp: BigInt,
  "commit hash, if hiddenVote in court is activated"
  commit: Bytes
  "gas units used for commit"
  commitGasUsed: BigInt!
  "gas price paid for commit"
  commitGasPrice: BigInt!
  "gas cost for commit (price*used)"
  commitGasCost: BigInt!
  "gas used for cast" 
  castGasUsed: BigInt!
  "gas price paid for cast"
  castGasPrice: BigInt!
  "gas cost for cast (price*used)"
  castGasCost: BigInt!
  "total gas cost commit+cast"
  totalGasCost: BigInt!
  "was the vote coherent with the majority? initialized in false"
  coherent: Boolean!
}

type NewPeriod @entity {
  id: ID!
  disputeId: BigInt!,
  newPeriod: Period!
  blockNumber: BigInt!,
}

type Draw @entity {
  "drawID: disputeID-voteID"
  id: ID!,
  "address drawn in the vote"
  address: Bytes!,
  "dispute ID"
  disputeId: BigInt!,
  "appeal round"
  roundNumber: BigInt!,
  "vote ID of the vote in this dispute"
  voteId: BigInt!,
  "timestamp when the vote was drawn"
  timestamp: BigInt!
}

type TokenAndETHShift @entity {
  "tx_hash-log_index"
  id: ID!,
  "Dispute id related to the event"
  disputeId: Dispute!,
  "Amount of tokens redistributed in the event"
  tokenAmount: BigInt!,
  "Amount of ETH redistributed in the event"
  ETHAmount: BigInt!,
  "wallet of the Juror involved"
  address: Juror!,
  "block number"
  blockNumber: BigInt!,
  "timestamp of the tx"
  timestamp: BigInt!
}


## PolicyUpdate entities
type PolicyUpdate @entity {
  id: ID! # the court id
  subcourtID: BigInt! # uint256
  policy: String! # String
  contractAddress: Bytes! # address
  timestamp: BigInt! # uint256
  blockNumber: BigInt! # unit256
}